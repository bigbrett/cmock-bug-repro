---

# Notes:
# Sample project C code is not presently written to produce a release artifact.
# As such, release build options are disabled.
# This sample, therefore, only demonstrates running a collection of unit tests.

:project:
  :use_exceptions: FALSE
  :use_test_preprocessor: TRUE
  :use_auxiliary_dependencies: TRUE
  :build_root: build
  :test_file_prefix: test_
  :use_assebly: FALSE
  :default_tasks:
    - test:all

:environment:

:extension:
  :executable: .out

:paths:
  :test:
    - +:test/**
    - -:test/support
  :source:
    - common/**

:defines:
  # in order to add common defines:
  #  1) remove the trailing [] from the :common: section
  #  2) add entries to the :common: section (e.g. :test: has TEST defined)
  :commmon: &common_defines
    - CPU_MIMXRT1051DVL6B
  :test:
    - *common_defines
    - TEST
    - UNITY_INCLUDE_PRINT_FORMATTED
  :test_preprocess:
    - *common_defines
    - TEST


:cmock:
  :mock_prefix: mock_
  :when_no_prototypes: :warn
  :plugins:
    - :ignore
    - :callback
    - :expect_any_args
    - :ignore_arg
    - :return_thru_ptr
  :treat_inlines: :include

# LIBRARIES
# These libraries are automatically injected into the build process. Those specified as
# common will be used in all types of builds. Otherwise, libraries can be injected in just
# tests or releases. These options are MERGED with the options in supplemental yaml files.
:libraries:
  :placement: :end
  :flag: "${1}"  # or "-L ${1}" for example
  :common: &common_libraries []
  :test:
    - *common_libraries
  :release:
    - *common_libraries

:plugins:
  :enabled:
    - stdout_pretty_tests_report
    - module_generator
    - raw_output_report

:module_generator:
  :project_root: ./
  :source_root: ./
  :test_root: test/

...
